apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- if .Values.app.affinity.enabled }}
      affinity:
        podAntiAffinity:
          {{- if .Values.app.affinity.hard }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ .Values.app.name }}
            topologyKey: kubernetes.io/hostname
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ .Values.app.name }}
              topologyKey: kubernetes.io/hostname
          {{- end }}
      {{- end }}
      {{- if .Values.app.topologySpreadConstraints.enabled }}
      topologySpreadConstraints:
      - maxSkew: {{ .Values.app.topologySpreadConstraints.maxSkew }}
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: {{ .Values.app.topologySpreadConstraints.whenUnsatisfiable }}
        labelSelector:
          matchLabels:
            app: {{ .Values.app.name }}
      {{- end }}
      containers:
      - name: {{ .Values.app.name }}
        image: {{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}
        ports:
        - containerPort: {{ .Values.app.port }}
        env:

        # Basic Configuration
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: LICENSE_KEY
        - name: WEBUI_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: WEBUI_SECRET_KEY
        - name: WEBUI_URL
          value: "{{ .Values.app.webuiUrl }}"

        # Managed Database
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: REDIS_URL
        - name: REDIS_CLUSTER
          value: "{{ .Values.app.redis.cluster }}"

        # Vector DB
        - name: VECTOR_DB
          value: "{{ .Values.app.vectorDb }}"
        - name: PGVECTOR_DB_URL
          valueFrom:
            secretKeyRef: 
              name: {{ .Values.secrets.name }}
              key: DATABASE_URL

        # Storage Config
        - name: STORAGE_PROVIDER
          value: "{{ .Values.app.storage.provider }}"
        - name: S3_BUCKET_NAME
          value: "{{ .Values.app.storage.s3.bucketName }}"
        - name: S3_REGION_NAME
          value: "{{ .Values.app.storage.s3.region }}"
        - name: S3_KEY_PREFIX
          value: "{{ .Values.app.storage.s3.keyPrefix }}"
        - name: S3_ENDPOINT_URL
          value: "{{ .Values.app.storage.s3.endpointUrl }}"
        
        # Websocket Broker
        - name: ENABLE_WEBSOCKET_SUPPORT
          value: "{{ .Values.app.websocket.enabled }}"
        - name: WEBSOCKET_MANAGER
          value: "{{ .Values.app.websocket.manager }}"
        - name: WEBSOCKET_REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: REDIS_URL
        - name: WEBSOCKET_REDIS_CLUSTER
          value: "{{ .Values.app.redis.cluster }}"
        - name: REDIS_KEY_PREFIX
          value: "{{ .Values.app.redis.keyPrefix }}"

        # Auth
        - name: ENABLE_LOGIN_FORM
          value: "{{ .Values.app.auth.enableLoginForm }}"
        - name: ENABLE_SIGNUP_PASSWORD_CONFIRMATION
          value: "{{ .Values.app.auth.enableSignupPasswordConfirmation }}"
        - name: ENABLE_OAUTH_SIGNUP
          value: "{{ .Values.app.auth.enableOauthSignup }}"
        - name: ENABLE_OAUTH_PERSISTENT_CONFIG
          value: "{{ .Values.app.auth.enableOauthPersistentConfig }}"
        - name: OAUTH_UPDATE_PICTURE_ON_LOGIN
          value: "{{ .Values.app.auth.oauthUpdatePictureOnLogin }}"
        - name: OAUTH_MERGE_ACCOUNTS_BY_EMAIL
          value: "{{ .Values.app.auth.oauthMergeAccountsByEmail }}"
        - name: ENABLE_OAUTH_ROLE_MANAGEMENT
          value: "{{ .Values.app.auth.enableOauthRoleManagement }}"
        - name: ENABLE_OAUTH_GROUP_MANAGEMENT
          value: "{{ .Values.app.auth.enableOauthGroupManagement }}"
        # - name: GOOGLE_CLIENT_ID
        #   valueFrom:
        #     secretKeyRef:
        #       name: {{ .Values.secrets.name }}
        #       key: GOOGLE_CLIENT_ID
        # - name: GOOGLE_CLIENT_SECRET
        #   valueFrom:
        #     secretKeyRef:
        #       name: {{ .Values.secrets.name }}
        #       key: GOOGLE_CLIENT_SECRET
        - name: OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: OAUTH_CLIENT_ID
        - name: OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: OAUTH_CLIENT_SECRET
        - name: OPENID_PROVIDER_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: OPENID_PROVIDER_URL
        - name: OPENID_REDIRECT_URI
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: OPENID_REDIRECT_URI
        - name: ENABLE_FORWARD_USER_INFO_HEADERS
          value: "{{ .Values.app.auth.enableForwardUserInfoHeaders }}"
        - name: OAUTH_PROVIDER_NAME
          value: "{{ .Values.app.auth.oauthProviderName }}"
        - name: WEBUI_AUTH_SIGNOUT_REDIRECT_URL
          value: "{{ .Values.app.auth.signoutRedirectUrl }}"
        - name: DEFAULT_USER_ROLE
          value: "{{ .Values.app.auth.defaultUserRole }}"

        # Version Update Check
        - name: ENABLE_VERSION_UPDATE_CHECK
          value: "{{ .Values.app.enableVersionUpdateCheck }}"

        # Web Search with Searxng
        - name: ENABLE_WEB_SEARCH
          value: "{{ .Values.app.webSearch.enabled }}"
        - name: WEB_SEARCH_ENGINE
          value: "{{ .Values.app.webSearch.engine }}"
        - name: SEARXNG_QUERY_URL
          value: "{{ .Values.app.webSearch.searxngQueryUrl }}"

        # RAG Content Extraction Engine
        - name: CONTENT_EXTRACTION_ENGINE
          value: "{{ .Values.app.contentExtraction.engine }}"
        - name: TIKA_SERVER_URL
          value: "{{ .Values.app.contentExtraction.tikaServerUrl }}"

        # Telemetry
        # TODO: Translate to helm chart format
        # TODO: Find a way to secure the OTLP
        # - ENABLE_OTEL=true
        # - ENABLE_OTEL_METRICS=true
        # - OTEL_EXPORTER_OTLP_INSECURE=true # Use insecure connection for OTLP, remove in production
        # - OTEL_EXPORTER_OTLP_ENDPOINT=http://grafana:4317
        # - OTEL_SERVICE_NAME=open-webui

        # Embedding Engine & Task Models
        # TODO: Translate to helm chart format
        # TODO: Setup the embedding engine 
        # - RAG_EMBEDDING_ENGINE=openai
        # - RAG_EMBEDDING_MODEL=text-embedding-3-small
        # TODO: Setup task models 
        # - TASK_MODEL
        # - TASK_MODEL_EXTERNAL 
        
        resources:
          requests:
            memory: "{{ .Values.app.resources.requests.memory }}"
            cpu: "{{ .Values.app.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.app.resources.limits.memory }}"
            cpu: "{{ .Values.app.resources.limits.cpu }}"