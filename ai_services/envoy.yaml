# TODO: Add TLS termination for the API
# TODO: Add API_KEY authentication

static_resources:
  listeners:
  - name: main_listener
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains: ["*"]
              routes:
              - match:
                  prefix: "/v1/embeddings"
                  headers:
                  - name: "x-model"
                    string_match:
                      exact: "bge-m3"
                route:
                  cluster: bge_m3_cluster
              - match:
                  prefix: "/v1/embeddings"
                route:
                  cluster: bge_m3_cluster
              - match:
                  prefix: "/v1/rerank"
                  headers:
                  - name: "x-model"
                    string_match:
                      exact: "bge-reranker-v2.5"
                route:
                  cluster: bge_reranker_cluster
              - match:
                  prefix: "/v1/rerank"
                route:
                  cluster: bge_reranker_cluster
              - match:
                  prefix: "/v1/chat/completions"
                route:
                  cluster: sealion_cluster
              - match:
                  prefix: "/v1/models"
                direct_response:
                  status: 200
                  body:
                    inline_string: '{"object":"list","data":[{"id":"aisingapore/Gemma-SEA-LION-v3-9B-IT","object":"model","created":1677610602,"owned_by":"aisingapore"},{"id":"aisingapore/Llama-SEA-LION-v3.5-8B-R","object":"model","created":1677610602,"owned_by":"aisingapore"},{"id":"aisingapore/Llama-SEA-LION-v3-70B-IT","object":"model","created":1677610602,"owned_by":"aisingapore"},{"id":"BAAI/bge-m3","object":"model","created":1677610602,"owned_by":"BAAI"},{"id":"BAAI/bge-reranker-v2-m3","object":"model","created":1677610602,"owned_by":"BAAI"}]}'
              - match:
                  prefix: "/health"
                direct_response:
                  status: 200
                  body:
                    inline_string: "OK"
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")
                  
                  -- Skip auth for health check
                  if path == "/health" then
                    return
                  end
                  
                  -- Get client API key from Authorization header
                  local auth_header = request_handle:headers():get("authorization")
                  if not auth_header then
                    request_handle:respond({[":status"] = "401"}, "Missing Authorization header")
                    return
                  end
                  
                  -- Extract API key (format: "Bearer api_key")
                  local client_api_key = string.match(auth_header, "Bearer%s+(.+)")
                  if not client_api_key then
                    request_handle:respond({[":status"] = "401"}, "Invalid Authorization format")
                    return
                  end
                  
                  -- Validate against allowed API keys (comma-separated env var)
                  local allowed_keys = os.getenv("ALLOWED_API_KEYS") or ""
                  local key_found = false
                  for key in string.gmatch(allowed_keys, "([^,]+)") do
                    if string.gsub(key, "%s+", "") == client_api_key then
                      key_found = true
                      break
                    end
                  end
                  
                  if not key_found then
                    request_handle:respond({[":status"] = "403"}, "Invalid API key")
                    return
                  end
                  
                  -- Add SeaLion API key for upstream requests
                  local sealion_key = os.getenv("SEALION_API_KEY")
                  if sealion_key then
                    request_handle:headers():add("authorization", "Bearer " .. sealion_key)
                  end
                end
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: sealion_cluster
    connect_timeout: 30s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: sealion_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: api.sea-lion.ai
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        sni: api.sea-lion.ai
  - name: bge_m3_cluster
    connect_timeout: 30s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: bge_m3_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: vllm-bge-m3
                port_value: 8000
  - name: bge_reranker_cluster
    connect_timeout: 30s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: bge_reranker_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: vllm-bge-reranker
                port_value: 8001

admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901